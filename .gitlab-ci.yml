################################################################################
# Gitlab CI YAML configuration file
################################################################################

################################################################################
# Global definitions

image: debian:testing

stages:
  - prepare
  - dependencies
  - siril
  - packaging
  - distribution
  - analysis

variables:
  GIT_DEPTH: "1"
  BUILD_DIR: "_build"
  INSTALL_DIR: "siril"
  INSTALL_PREFIX: "${CI_PROJECT_DIR}/${INSTALL_DIR}"
  CROSSROAD_OUT: "crossroad-out"
  APT_CACHE: "$CI_PROJECT_DIR/apt-cache"
  W64_OUT: "/c/msys64/mingw64"

################################################################################
# Prepare Dockers images

# Image for GNU/Linux build
build-image:
  stage: prepare
  cache: {}
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context build/build-image/ --dockerfile build/build-image/Dockerfile.debian-latest --destination $CI_REGISTRY_IMAGE:build-debian-latest --cache=true --cache-ttl=120h
    
# Image for GNU/Linux build
build-image-oldstable:
  stage: prepare
  cache: {}
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context build/build-image/ --dockerfile build/build-image/Dockerfile.debian-oldstable --destination $CI_REGISTRY_IMAGE:build-debian-oldstable --cache=true --cache-ttl=120h

# Image for Windows64 build
build-image-win64:
  stage: prepare
  cache: {}
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context build/build-image/ --dockerfile build/build-image/Dockerfile.win64-latest  --destination $CI_REGISTRY_IMAGE:build-win64-latest --cache=true --cache-ttl=120h

# Try building/packaging with msys2 in one step
# (otherwise win VM gets wiped)
win64-native-nightly:
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /w64/ || $CI_COMMIT_TAG != null || $CI_COMMIT_BRANCH =~ /wininstall/ || $CI_PIPELINE_SOURCE == "schedule"
  stage: prepare
  cache: {}
  variables:
    CHERE_INVOKING: "yes"
    MSYSTEM: "MINGW64"
  tags:
    - windows
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    when: always
    expire_in: 1 week
    paths:
    - ${INSTALL_DIR}
  script:
    - choco install msys2 --params "/InstallDir:C:\msys64" -y
    - C:\msys64\usr\bin\bash -lc "bash -x ./build/windows/native-gitlab-ci/siril-deps.sh"
    - C:\msys64\usr\bin\bash -lc "bash -x ./build/windows/native-gitlab-ci/siril-build.sh"
    - C:\msys64\usr\bin\bash -lc "bash -x ./build/windows/native-gitlab-ci/siril-package.sh"

################################################################################
# GNU/Linux 64-bit CIs

# Currently Siril does not need dependency compilation, so we can skip that.
deps-debian:
  stage: dependencies
  image: $CI_REGISTRY_IMAGE:build-debian-latest
  cache:
    paths:
    - apt-cache
  artifacts:
    expire_in: 2 hours
    when: always
    paths:
    - "${INSTALL_DIR}"
    - _Criterion/_build
  before_script:
    - git clone --recurse-submodules --depth=1 -b bleeding https://github.com/Snaipe/Criterion.git _Criterion
    - export PKG_CONFIG_PATH="${INSTALL_PREFIX}/lib/pkgconfig"
    - export PKG_CONFIG_PATH="${INSTALL_PREFIX}/lib/`gcc -print-multiarch`/pkgconfig/:$PKG_CONFIG_PATH"
    - export LD_LIBRARY_PATH="${INSTALL_PREFIX}/lib:${LD_LIBRARY_PATH}"
    - export LD_LIBRARY_PATH="${INSTALL_PREFIX}/lib/`gcc -print-multiarch`:$LD_LIBRARY_PATH"
    - export XDG_DATA_DIRS="${INSTALL_PREFIX}/share:/usr/local/share:/usr/share"
  script:
    - cd _Criterion
    - patch --binary -p1 < ../build/windows/criterion.patch
    - meson _build --prefix ${INSTALL_PREFIX}
    - ninja -C _build install
  needs: ["build-image"]

.siril-debian/testing-base:
  stage: siril
  image: $CI_REGISTRY_IMAGE:build-debian-latest
  dependencies:
    - deps-debian
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  cache:
    paths:
      - apt-cache
  artifacts:
    expire_in: 1 week
    when: always
    name: "app-build-${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    paths:
      - ${BUILD_DIR}
      - ${INSTALL_DIR}
  before_script:
    - export PKG_CONFIG_PATH="${INSTALL_PREFIX}/lib/pkgconfig:${INSTALL_PREFIX}/share/pkgconfig"
    - export PKG_CONFIG_PATH="${INSTALL_PREFIX}/lib/`gcc -print-multiarch`/pkgconfig/:$PKG_CONFIG_PATH"
    - export PKG_CONFIG_PATH="${INSTALL_PREFIX}/share/`gcc -print-multiarch`/pkgconfig/:$PKG_CONFIG_PATH"
    - export LD_LIBRARY_PATH="${INSTALL_PREFIX}/lib:${LD_LIBRARY_PATH}"
    - export LD_LIBRARY_PATH="${INSTALL_PREFIX}/lib/`gcc -print-multiarch`:$LD_LIBRARY_PATH"
    - export XDG_DATA_DIRS="${INSTALL_PREFIX}/share:/usr/local/share:/usr/share"
    - export PATH="${INSTALL_PREFIX}/bin:$PATH"
  needs: ["deps-debian"]

siril-deb-autotools:
  extends: .siril-debian/testing-base
  script:
    - NOCONFIGURE=1 ./autogen.sh
    - mkdir ${BUILD_DIR} && cd ${BUILD_DIR}
    - ../configure --prefix=${INSTALL_PREFIX}
    - make -j "$(nproc)" all install

siril-deb-meson:
  extends: .siril-debian/testing-base
  script:
    - meson --prefix="${INSTALL_PREFIX}" ${BUILD_DIR} -Db_coverage=true -Denable-libcurl=yes -Dlibconfig=true -Dcriterion=true
    - ninja -C ${BUILD_DIR} install
    - meson test -C ${BUILD_DIR} -v --no-suite perfs
    - cd ${BUILD_DIR}
    - gcovr --xml-pretty --exclude-unreachable-branches --exclude-directories subprojects --exclude-directories  src/tests  --root ../ -o coverage.xml --print-summary
    - cd ..
  artifacts:
    paths:
      - ${BUILD_DIR}/meson-logs/testlog.junit.xml
      - ${BUILD_DIR}/coverage.xml    
    reports:
      junit: ${BUILD_DIR}/meson-logs/testlog.junit.xml
      coverage_report:
        coverage_format: cobertura
        path: ${BUILD_DIR}/coverage.xml


################################################################################
# WINDOWS 64-bit CI

deps-win64:
  stage: dependencies
  image: $CI_REGISTRY_IMAGE:build-win64-latest
  variables:
    XDG_CACHE_HOME: "$CI_PROJECT_DIR/.cache/"
    XDG_DATA_HOME: "$CI_PROJECT_DIR/.local/share/"
  cache:
    paths:
      - .cache/crossroad/
      - apt-cache
  before_script:
    - git clone --depth=${GIT_DEPTH} git://git.tuxfamily.org/gitroot/crossroad/crossroad.git
    - cd crossroad
    - ./setup.py install --prefix=`pwd`/../.local
    - cd ..
    - pip3 install zstandard
  script:
    - export PATH="`pwd`/.local/bin:$PATH"
    - crossroad w64 siril --run="build/windows/crossbuild-gitlab-ci/build-deps.sh"
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    when: always
    expire_in: 2 hours
    paths:
      - .local/
      - _deps/
  needs: ["build-image-win64"]

siril-win64:
  stage: siril
  image: $CI_REGISTRY_IMAGE:build-win64-latest
  dependencies:
    - deps-win64
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    XDG_CACHE_HOME: "$CI_PROJECT_DIR/.cache/"
    XDG_DATA_HOME: "$CI_PROJECT_DIR/.local/share/"
  cache:
    paths:
      - .cache/crossroad/
      - apt-cache
  script:
    - update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
    - update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix
    - export PATH="`pwd`/.local/bin:$PATH"
    - mkdir _build && cd _build
    - echo 'crossroad meson --buildtype=release --prefix="${INSTALL_PREFIX}" -Denable-libcurl=yes -Dlibconfig=true .. && ninja install && cp -fr $CROSSROAD_PREFIX/ ../${CROSSROAD_OUT}' | crossroad w64 siril --run="-"
  needs: ["deps-win64"]
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    when: always
    expire_in: 2 hours
    paths:
      - ${BUILD_DIR}
      - ${CROSSROAD_OUT}
      - ${INSTALL_DIR}

################################################################################
# Packaging

win64-nightly:
  stage: packaging
  image: $CI_REGISTRY_IMAGE:build-win64-latest
  dependencies:
    - siril-win64
  script:
    # Package shared ressources
    - cp -fr ${CROSSROAD_OUT}/share/glib-2.0/ ${INSTALL_PREFIX}/share
    - cp -fr ${CROSSROAD_OUT}/share/icons/ ${INSTALL_PREFIX}/share
    - cp -fr ${CROSSROAD_OUT}/share/locale/ ${INSTALL_PREFIX}/share

    # Package executable
    - cp -fr ${CROSSROAD_OUT}/bin/gdbus.exe ${INSTALL_PREFIX}/bin/
    - cp -fr ${CROSSROAD_OUT}/bin/glib-compile-schemas.exe ${INSTALL_PREFIX}/bin/
    - cp -fr ${CROSSROAD_OUT}/bin/gdk-pixbuf-query-loaders.exe ${INSTALL_PREFIX}/bin/
    - cp -fr ${CROSSROAD_OUT}/bin/gdk-pixbuf-pixdata.exe ${INSTALL_PREFIX}/bin/
    - cp -fr ${CROSSROAD_OUT}/bin/gdk-pixbuf-thumbnailer.exe ${INSTALL_PREFIX}/bin/
    - cp -fr ${CROSSROAD_OUT}/bin/gspawn-win64-helper.exe ${INSTALL_PREFIX}/bin/
    - cp -fr ${CROSSROAD_OUT}/bin/gspawn-win64-helper-console.exe ${INSTALL_PREFIX}/bin/
    - cp build/windows/crossbuild-gitlab-ci/siril-wrapper.cmd ${INSTALL_PREFIX}/bin/

    # Package lib
#    - mkdir ${INSTALL_PREFIX}/lib/
    - cp -fr ${CROSSROAD_OUT}/lib/gdk-pixbuf-2.0 ${INSTALL_PREFIX}/lib/
    - cp build/windows/loaders.cache ${INSTALL_PREFIX}/lib/gdk-pixbuf-2.0/2.10.0/
    - glib-compile-schemas --targetdir=${INSTALL_PREFIX}/share/glib-2.0/schemas ${CROSSROAD_OUT}/share/glib-2.0/schemas

    # Package dll with a Python script using objdump
    - python3 build/windows/dll_link.py ${INSTALL_PREFIX}/bin/siril.exe ${CROSSROAD_OUT}/ ${INSTALL_PREFIX}
    - python3 build/windows/dll_link.py ${INSTALL_PREFIX}/bin/gdbus.exe ${CROSSROAD_OUT}/ ${INSTALL_PREFIX}
    - python3 build/windows/dll_link.py ${CROSSROAD_OUT}/bin/gdk-pixbuf-query-loaders.exe ${CROSSROAD_OUT}/ ${INSTALL_PREFIX}
    - python3 build/windows/dll_link.py ${CROSSROAD_OUT}/bin/gdk-pixbuf-pixdata.exe ${CROSSROAD_OUT}/ ${INSTALL_PREFIX}
    - python3 build/windows/dll_link.py ${CROSSROAD_OUT}/bin/gdk-pixbuf-thumbnailer.exe ${CROSSROAD_OUT}/ ${INSTALL_PREFIX}
    - python3 build/windows/dll_link.py ${CROSSROAD_OUT}/bin/gspawn-win64-helper.exe ${CROSSROAD_OUT}/ ${INSTALL_PREFIX}
    - python3 build/windows/dll_link.py ${CROSSROAD_OUT}/bin/gspawn-win64-helper-console.exe ${CROSSROAD_OUT}/ ${INSTALL_PREFIX}
    - python3 build/windows/dll_link.py ${CROSSROAD_OUT}/bin/glib-compile-schemas.exe ${CROSSROAD_OUT}/ ${INSTALL_PREFIX}
    - python3 build/windows/dll_link.py ${CROSSROAD_OUT}/lib/gdk-pixbuf-2.0/2.10.0/loaders/libpixbufloader-svg.dll ${CROSSROAD_OUT}/ ${INSTALL_PREFIX}

  needs: ["siril-win64"]
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    when: always
    expire_in: 1 week
    paths:
      - ${INSTALL_DIR}

flatpak-nightly:
  # Update the image URL whenever the runtime version in the flatpak manifest is changed
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /CI-flatpak/ || $CI_COMMIT_TAG != null || $CI_COMMIT_BRANCH =~ /flatpak/ || $CI_PIPELINE_SOURCE == "schedule"
  image: 'quay.io/gnome_infrastructure/gnome-runtime-images:gnome-master'
  stage: packaging
  variables:
    MANIFEST_PATH: "build/flatpak/org.free_astro.siril.json"
    FLATPAK_MODULE: "siril"
    APP_ID: "org.free_astro.siril"
    RUNTIME_REPO: "https://nightly.gnome.org/gnome-nightly.flatpakrepo"
    BUNDLE: "org.free_astro.siril.flatpak"
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - flatpak-builder --verbose --disable-rofiles-fuse --ccache --repo=repo ${BRANCH:+--default-branch=$BRANCH} flatpak_app ${MANIFEST_PATH} 1>/dev/null
    - flatpak build-bundle repo ${BUNDLE} --runtime-repo=${RUNTIME_REPO} ${APP_ID} ${BRANCH}
  artifacts:
    name: "Flatpak artifacts"
    expose_as: "Get Flatpak bundle here"
    when: always
    paths:
      - "${BUNDLE}"
      - "repo/"
    expire_in: 1 week
  cache:
    # key: "$CI_JOB_NAME"
    paths:
      - ".flatpak-builder/downloads"
      - ".flatpak-builder/git"
      - ".flatpak-builder/cache"
      - ".flatpak-builder/ccache"
  needs: []
  allow_failure: true
  

appimage-nightly:
  stage: packaging
  image: $CI_REGISTRY_IMAGE:build-debian-oldstable
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  cache:
    paths:
      - apt-cache
  before_script:
    - apt-get install -y wget
  script:
    - bash -ex build/appimage/generate.sh
  artifacts:
    expire_in: 1 week
    paths:
      - build/appimage/Siril*.AppImage*
  needs: ["build-image-oldstable"]

################################################################################
# Analysis

cppcheck:
  stage: analysis
  before_script:
    - apt-get update
    - apt-get install -y cppcheck
  script:
    - cppcheck -q -j8 --enable=all --force --output-file=cppcheck.xml --xml --xml-version=2
        -i _build -i _deps -i ${INSTALL_PREFIX} -i subprojects  -i src/rt -i src/io/avi_pipp -i .local -i .cache .
    - mkdir report
    - cppcheck-htmlreport --source-dir=. --title=siril --file=cppcheck.xml --report-dir=report
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    expire_in: 1 week
    when: always
    paths:
      - report
  needs: []

################################################################################
# Distribution
win64-native-installer:
  only:
    variables:
      - $CI_COMMIT_MESSAGE =~ /w64i/ || $CI_COMMIT_TAG != null || $CI_COMMIT_BRANCH =~ /wininstall/ || $CI_PIPELINE_SOURCE == "schedule"
  variables:
    CHERE_INVOKING: "yes"
  tags:
    - windows
  stage: distribution
  dependencies:
    - win64-native-nightly
  artifacts:
    name: "${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}"
    when: always
    expire_in: 1 week
    paths:
    - WinInstaller
    - installer.log
  script:
    - choco install innosetup -y
    - powershell -File .\build\windows\installer\siril-win-installer.ps1 2>&1 > installer.log
  needs: ["win64-native-nightly"]
